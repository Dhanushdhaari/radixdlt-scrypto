use scrypto::prelude::*;

#[derive(TypeId, Encode, Decode, Describe, PartialEq)]
struct ExtraStruct {
    field_one: String
}

#[derive(TypeId, Encode, Decode, Describe, PartialEq)]
enum ExtraEnum {
    EntryOne,
    EntryTwo
}

external_blueprint! {
    {
        package: "%%PACKAGE_ADDRESS%%",
        blueprint: "ExternalBlueprintTarget"
    },
    ExternalBlueprintTarget {
        fn create() -> ComponentAddress;
        fn get_value_via_package_call() -> String;
        fn get_value_via_ref(&self) -> ExtraStruct;
        fn get_value_via_mut_ref(&mut self) -> ExtraEnum;
    }
}

external_component! {
    ExternalComponentTarget {
        fn get_value_via_ref(&self) -> ExtraStruct;
        fn get_value_via_mut_ref(&mut self) -> ExtraEnum;
    }
}

// WARNING: This crate is modified in the external_bridge tests and compiled
//          this crate should not be used by other tests, else there may be race conditions when the tests are run in parallel
blueprint! {
    struct ExternalBlueprintCaller { }

    impl ExternalBlueprintCaller {
        pub fn create() -> ComponentAddress {
            Self { }
            .instantiate()
            .globalize()
        }

        pub fn run_tests_with_external_blueprint(&self) {
            // NB - These values should match those defined in ../../component/src/external_blueprint_target.rs
            assert!(ExternalBlueprintTarget::get_value_via_package_call() == "SUCCESS", "Package call failed");

            let component_address = ExternalBlueprintTarget::create();
            let mut target = ExternalBlueprintTarget::from(component_address);

            assert!(target.get_value_via_ref() == ExtraStruct { field_one: String::from("test_1") }, "Ref call failed");
            assert!(target.get_value_via_mut_ref() == ExtraEnum::EntryOne, "Mut Ref call failed");
        }

        pub fn run_tests_with_external_component(&self, component_address: ComponentAddress) {
            // NB - These values should match those defined in ../../component/src/external_blueprint_target.rs
            let mut target = ExternalComponentTarget::from(component_address);

            assert!(target.get_value_via_ref() == ExtraStruct { field_one: String::from("test_1") }, "Ref call failed");
            assert!(target.get_value_via_mut_ref() == ExtraEnum::EntryOne, "Mut Ref call failed");
        }
    }
}
